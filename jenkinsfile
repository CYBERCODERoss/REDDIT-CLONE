pipeline{
    agent any
    tools{
        jdk 'jdk17'
        nodejs 'node16'
    }

    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }

    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }

        stage('Checkout from Git'){
            steps{
                git branch: 'main', url: 'https://github.com/CYBERCODERoss/REDDIT-CLONE.git'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }

        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Reddit \
                    -Dsonar.projectKey=Reddit '''
                }
            }
        }

        stage("quality gate"){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        stage('OWASP FS SCAN') {
            steps {
                script {
                    // Define the NVD API key directly or as a credential in Jenkins
                    def nvdApiKey = '<add nvdAPIKey>'

                    // Set the NVD API key as an environment variable
                    withEnv(["NVD=${nvdApiKey}"]) {
                        // Run OWASP Dependency-Check scan with the API key
                        def scanResult = dependencyCheck additionalArguments: "--scan ./ --disableYarnAudit --disableNodeAudit --nvdApiKey $NVD", odcInstallation: 'DP-Check'
                        echo "Dependency-Check scan completed successfully."
                        echo "Result: $scanResult"
                    }
                }
            }
        }

        stage('TRIVY FS SCAN') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }

        stage("Docker Build & Push"){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){
                       sh "docker build -t reddit ."
                       sh "docker tag reddit nautilushell/reddit:latest "
                       sh "docker push nautilushell/reddit:latest "
                    }
                }
            }
        }

        stage("TRIVY"){
            steps{
                sh "trivy image --scanners vuln nautilushell/reddit:latest > trivy.txt"
            }
        }

        stage('Deploy to container'){
            steps{
                sh 'docker run -d --name reddit -p 3000:3000 nautilushell/reddit:latest'
            }
        }

        stage('Deploy to kubernets'){
            steps{
                script{
                    withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8s', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                       sh 'kubectl apply -f deployment.yml'
                       sh 'kubectl apply -f service.yml'
                       sh 'kubectl apply -f ingress.yml'
                  }
                }
            }
        }
    }
}